#!/user/bin/env groovy
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
import org.jenkinsci.plugins.pipeline.modeldefinition.parser.JSONParser
/*
plugins used in Jenkinsfile
- Bitbucket Server Notifier (notifyBitbucket)
- XML test reports generated during the builds (junit)
- email notifications (emailext)
- Workspace Cleanup Plugin (cleanWs)
- org.jenkinsci.plugins.pipeline.modeldefinition.Utils to skipspecific stages
*/
node('docker_build') {

    def PW_BRANCH = "${push_changes_0_new_name}"
    def NEW_COMMIT_HASH = "${push_changes_0_new_target_hash}"
    def PW_REPOSITORY = "${repository_slug}"

    timestamps {
        timeout(time: 3, unit: 'HOURS') {

        currentBuild.displayName = "${BUILD_NUMBER}:${repository_slug}:${PW_BRANCH}"
        println currentBuild.displayName
        currentBuild.description = "Build ${repository_slug} on branch: ${PW_BRANCH}"
        def verCode = UUID.randomUUID().toString()

        notifyBitbucket(commitSha1:"$NEW_COMMIT_HASH")

        def manifest_map = [
            'access-product-packaging': ['integrated-packaging'],
            'core': ['access-product-packaging','integrated-packaging'],
            'nrtric': ['integrated-packaging'],
            'rt-monitoring': ['integrated-packaging'],
            'uniperf': ['integrated-packaging'],
            'core-stacks': ['access-product-packaging'],
            '2g-stack': ['access-product-packaging'],
            'pnf-vnf': ['access-product-packaging'],
            'core-stacks-phy': ['access-product-packaging'],
            'vru-4g-phy': ['access-product-packaging'],
            'bbpms_bsp': ['access-product-packaging'],
            'vru-2g-phy': ['access-product-packaging'],
            'vru-3g-phy': ['access-product-packaging'],
            'nodeh': ['access-product-packaging'],
            'cws-rrh': ['access-product-packaging']
            ]

        def git_remotes = [
            'access-product-packaging': 'ssh://git@git.parallelwireless.net:7999/cd/access-product-packaging.git',
            'integrated-packaging': 'ssh://git@git.parallelwireless.net:7999/cd/integrated-packaging.git'
            ]

        def pull_remote = [ 
            'access-product-packaging' 	: 'https://git.parallelwireless.net/rest/api/1.0/projects/CD/repos/access-product-packaging/pull-requests',
            'integrated-packaging' 	: 'https://git.parallelwireless.net/rest/api/1.0/projects/CD/repos/integrated-packaging/pull-requests'
            ]
 
        def mirror = ''
        def pull_api = ''
        def pull_req = ''
        //def jsonSlurper = new JSONObject();

        try {

             stage ('Clone'){
               dir("${verCode}") {
                    def retryAttempt = 0
                    retry(2) {
                        if (retryAttempt > 0) {
                            sleep 60
                        }
                        retryAttempt = retryAttempt + 1
                            sh """
                            pwd
                            rm -rf global-packaging
                            mkdir global-packaging
                            cd global-packaging
                            git init
                            git remote add origin ssh://git@git.parallelwireless.net:7999/cd/global-packaging.git
                            git fetch
                            git checkout -b develop
                            git pull origin develop
                            """
                   }
               }
             }
             stage('Update Manifest Files') {
                dir("${verCode}") {
                    def retryAttempt = 0
                    retry(2) {
                        if (retryAttempt > 0) {
                            sleep 60
                        }
                        retryAttempt = retryAttempt + 1
                        def remotes = manifest_map[PW_REPOSITORY]
                        remotes.each{remote ->
                            mirror= git_remotes[remote]
                            pull_api = pull_remote[remote]
                            sh """
                            pwd
                            rm -rf ${remote}
                            mkdir ${remote}
                            cd ${remote}
                            git init
                            git remote add origin ${mirror}
                            git fetch
                            """

                            dir("${remote}"){
                                retValue = sh(returnStatus: true, script: "pwd")
                                retValue = sh(returnStatus: true, script: "git checkout -b integ/${PW_BRANCH}")
                                retValue = sh(returnStatus: true, script: "git pull origin integ/${PW_BRANCH}")
                                println retValue
                                if (retValue == 1){
                                    println "Branch not present. Pulling from develop"
                                    retValue = sh(returnStatus: true, script: "git pull origin develop")
                                }
                                sh(returnStatus: true, script: "sed -e 's/\"${PW_REPOSITORY}\": \".*\"/\"${PW_REPOSITORY}\": \"${NEW_COMMIT_HASH}\"/' --in-place manifest.json")
                                sh(returnStatus: true, script: "git commit -m 'tag-update commitID auto upgrade' manifest.json")
				sh(returnStatus: true, script: "git push --set-upstream origin integ/${PW_BRANCH}")
				pull_req = sh( returnStdout : true, script: "sh ../global-packaging/PullReqfile.sh integ/${PW_BRANCH} develop ${pull_api} ${remote} ${remote}").trim()
                                //println pull_req
                                def props = readJSON text:pull_req.toString()
                                
                                //result.accumulate("json", pull_req.toJSON());
                                //def object = jsonSlurper.parseText(pull_req)
                                println props["errors"]
                                println "---------"
                                //sh "sh ./global-packaging/PullReqfile.sh integ/${PW_BRANCH} develop"

                            }
                        } 
                    }
                }
            }
            currentBuild.result = 'SUCCESS'
        }
        catch (Exception Error) {
            currentBuild.result = 'FAILURE'
            throw Error
        }
        finally {
            cleanWs()
            notifySuccessful()
            notifyBitbucket(commitSha1:"$NEW_COMMIT_HASH")
        }
      }
    }
}

def notifySuccessful() {
     emailext (
         attachLog: true,
         subject: "Manifest file updated",
         body: "Manifest file updated ",
         mimeType: 'text/html',
         recipientProviders: [developers(), requestor()]
    )
}

