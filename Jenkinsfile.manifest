#!/user/bin/env groovy
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
/*
plugins used in Jenkinsfile
- Bitbucket Server Notifier (notifyBitbucket)
- XML test reports generated during the builds (junit)
- email notifications (emailext)
- Workspace Cleanup Plugin (cleanWs)
- org.jenkinsci.plugins.pipeline.modeldefinition.Utils to skipspecific stages
*/
node('docker_build') {

    def PW_BRANCH = "${push_changes_0_new_name}"
    def NEW_COMMIT_HASH = "${push_changes_0_new_target_hash}"
    def PW_REPOSITORY = "${repository_slug}"

    timestamps {
        timeout(time: 3, unit: 'HOURS') {

        currentBuild.displayName = "${BUILD_NUMBER}:${repository_slug}:${PW_BRANCH}"
        println currentBuild.displayName
        currentBuild.description = "Build ${repository_slug} on branch: ${PW_BRANCH}"
        def verCode = UUID.randomUUID().toString()

        notifyBitbucket(commitSha1:"$NEW_COMMIT_HASH")

        def manifest_map = [
            'access-product-packaging': ['integrated-packaging'],
            'core': ['access-product-packaging','integrated-packaging'],
            'nrtric': ['integrated-packaging'],
            'rt-monitoring': ['integrated-packaging'],
            'uniperf': ['integrated-packaging'],
            'core-stacks': ['access-product-packaging'],
            '2g-stack': ['access-product-packaging'],
            'pnf-vnf': ['access-product-packaging'],
            'core-stacks-phy': ['access-product-packaging'],
            'vru-4g-phy': ['access-product-packaging'],
            'bbpms_bsp': ['access-product-packaging'],
            'vru-2g-phy': ['access-product-packaging'],
            'vru-3g-phy': ['access-product-packaging'],
            'nodeh': ['access-product-packaging'],
            'cws-rrh': ['access-product-packaging']
            ]

        def git_remotes = [
            'access-product-packaging': 'ssh://git@git.parallelwireless.net:7999/cd/access-product-packaging.git',
            'integrated-packaging': 'ssh://git@git.parallelwireless.net:7999/cd/integrated-packaging.git'
            ]

        def pull_remote = [ 
            'access-product-packaging' 	: 'https://git.parallelwireless.net/rest/api/1.0/projects/CD/repos/access-product-packaging/pull-requests',
            'integrated-packaging' 	: 'https://git.parallelwireless.net/rest/api/1.0/projects/CD/repos/integrated-packaging/pull-requests'
            ]
        
        def mirror = ''
        def pull_api = ''

        try {
             stage('Update Manifest Files') {
                dir("${verCode}") {
                    def retryAttempt = 0
                    retry(2) {
                        if (retryAttempt > 0) {
                            sleep 60
                        }
                        retryAttempt = retryAttempt + 1
                        def remotes = manifest_map[PW_REPOSITORY]
                        remotes.each{remote ->
                            mirror= git_remotes[remote]
                            pull_api = pull_remote[remote]
                            sh """
                            pwd
                            rm -rf ${remote}
                            mkdir ${remote}
                            cd ${remote}
                            git init
                            git remote add origin ${mirror}
                            git fetch
                            """

                            dir("${remote}"){
                                retValue = sh(returnStatus: true, script: "pwd")
                                retValue = sh(returnStatus: true, script: "git checkout -b integ/${PW_BRANCH}")
                                retValue = sh(returnStatus: true, script: "git pull origin integ/${PW_BRANCH}")
                                println retValue
                                if (retValue == 1){
                                    println "Branch not present. Pulling from develop"
                                    retValue = sh(returnStatus: true, script: "git pull origin develop")
                                }
                                sh(returnStatus: true, script: "sed -e 's/\"${PW_REPOSITORY}\": \".*\"/\"${PW_REPOSITORY}\": \"${NEW_COMMIT_HASH}\"/' --in-place manifest.json")
                                sh(returnStatus: true, script: "git commit -m 'tag-update commitID auto upgrade' manifest.json")
                                sh(returnStatus: true, script: "git push --set-upstream origin integ/${PW_BRANCH}")
                                sh """                                
                                process_id=`cat /dev/urandom | tr -dc '0-9' | fold -w 256 | head -n 1 | sed -e 's/^0*//' | head --bytes 10`
                                cat > /tmp/process_id_datareq.json <<`EOF'
                                   {
                                      "title": "Manifest",
                                      "description": "Pull Requested has been created using Manifest from integ/${PW_BRANCH} to develop",
                                      "state": "OPEN",
                                      "open": true,
                                      "closed": false,
                                      "fromRef": {
                                                 "id": "sourcepullbranch",
                                                 "repository": {
                                                                  "slug": "${remote}",
                                                                  "name": null,
                                                                  "project": {
                                                                                "key": "CD"
                                                                             }
                                                               }
                                                 },
                                      "toRef": {
                                              "id": "develop",
                                               "repository": {
                                                                "slug": "${remote}",
                                                                "name": null,
                                                                "project": {
                                                                             "key": "CD"
                                                                           }
                                                             }
                                             },
                                             "locked": false,
                                             "links": {
                                                        "self": [
                                                                  null
                                                                ]
                                                      }
                                   }
                                EOF

                                #cp datreq.json datareq.json
                                modified_branch=`echo integ/${PW_BRANCH}|sed -e "s/\"//%/g"`

                                sed -i "s/sourcepullbranch/modified_branch/g" /tmp/process_id_datareq.json
                                sed -i "s/%/\"//g" /tmp/process_id_datareq.json

                                curl -s -u pw-build:builtit4u! -H "Content-Type: application/json" ${pull_api} -X POST --data @/tmp/process_id_datareq.json >/tmp/process_id_curl.log 2>&1

                                echo "Pull request created: "
                                
                                """
                            }
                        } 
                    }
                }
            }
            currentBuild.result = 'SUCCESS'
        }
        catch (Exception Error) {
            currentBuild.result = 'FAILURE'
            throw Error
        }
        finally {
            cleanWs()
            notifySuccessful()
            notifyBitbucket(commitSha1:"$NEW_COMMIT_HASH")
        }
      }
    }
}

def notifySuccessful() {
     emailext (
         attachLog: true,
         subject: "Manifest file updated",
         body: "Manifest file updated",
         mimeType: 'text/html',
         recipientProviders: [developers(), requestor()]
    )
}

